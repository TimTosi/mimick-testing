version: 2
jobs:
  build:
    docker:
      - image: circleci/golang:1.9
    working_directory: /go/src/github.com/timtosi/mimick-testing
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: make install
      - run:
          name: Build binary
          command: |
            cd ./cmd
            go build -o ${CIRCLE_PROJECT_REPONAME}
            ls -la
      - persist_to_workspace:
          root: cmd
          paths:
            - mimick-testing

  run-test:
    # machine: true
    docker:
      - image: circleci/golang:1.9
      # - image: postgres:11.3
      #   environment:
      #     POSTGRES_USER: dev_env_user
      #     POSTGRES_DB: test_db
      #     POSTGRES_PASSWORD: dev_env_password
    working_directory: /go/src/github.com/timtosi/mimick-testing
    environment:
      # GOROOT: ""
      # GOPATH: "${HOME}/"
      # PATH: "${GOPATH}/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      TEST_RESULTS: /tmp/test-results
    steps:
      - checkout
      - run:
          name: Initialize working environement
          command: |
            mkdir -p $TEST_RESULTS
            # mkdir -p /usr/local/go_workspace/bin
      - run:
          name: Install dependencies
          command: |
            make install
            go get github.com/jstemmer/go-junit-report
      ##################
      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin
      - run:
          name: Install Docker Compose
          command: |
            set -x
            curl -L https://github.com/docker/compose/releases/download/1.11.2/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
      ##################

      - run:
          name: Set up infrastructure.
          command: make infra
      # - run:
      #       name: Waiting for Postgres to be ready
      #       command: |
      #           for i in `seq 1 20`;
      #           do
      #               nc -z localhost 5432 && echo Success && exit 0
      #               echo -n .
      #               sleep 1
      #           done
      #           echo Failed waiting for Postgres && exit 1
      - run:
          name: Run unit tests
          command: |
              trap "go-junit-report <${TEST_RESULTS}/go-test.out > ${TEST_RESULTS}/go-test-report.xml" EXIT
              make test | tee ${TEST_RESULTS}/go-test.out
      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output
      - store_test_results:
          path: /tmp/test-results

  # deploy:
  #   machine: true
  # steps:
  #     - checkout
  #     - run:
  #         name: Deploy
  #         command: echo 'Fake deploy'

workflows:
  version: 2
  build-test:
    jobs:
      - run-test
      - build
      # - deploy:
      #     requires:
      #       - run-test
      #       - build
      #     filters:
      #       branches:
      #         only:
      #           - master
      #           - production
